"use strict";(self.webpackChunkstellar_odyssey=self.webpackChunkstellar_odyssey||[]).push([[503],{8503:function(C,u,n){n.r(u),n.d(u,{active:function(){return h},chronos:function(){return f},claimDailyReward:function(){return s},passive:function(){return d},tActive:function(){return o},tPassive:function(){return a},timewarp:function(){return p}});var c=n(6415),i=n(5296);const{app:r}=i.default.PIXI,o=i.default.addCurrency("tActive"),a=i.default.addCurrency("tPassive"),h=i.default.addCurrency("active"),d=i.default.addCurrency("passive"),f=i.default.addCurrency("chronos");r.ticker.add(function(e){e*=1e3/r.ticker.FPS*1e3,o.static.gain(e),a.static.gain(e),h.static.gain(e),d.static.gain(e)});function p(e){}const t=i.default.addAttribute("lastReward",!1);function s(e=!1){return e||t.value.sub(Date.now()).mul(-1).gte(432e5)?(t.value=(0,c.E)(Date.now()),f.static.gain(),!0):!1}},6415:function(C,u,n){n.d(u,{E:function(){return c.E}});var c=n(4894),i=n(3161),r=n(2476),o=n(7122);class a{constructor(t,s,e){this.x=t,this.y=s,this.properties=e||{}}setValue(t,s){return this.properties[t]=s,s}getValue(t){return this.properties[t]}}class h{constructor(t,s,e){this.x_size=t,this.y_size=s,this.cells=[];for(let l=0;l<s;l++){this.cells[l]=[];for(let g=0;g<t;g++)this.cells[l][g]=new a(g,l,e)}}getAll(){const t=[];for(let s=0;s<this.y_size;s++)for(let e=0;e<this.x_size;e++)t.push(this.cells[s][e]);return t}all(){return this.getAll()}getAllX(t){const s=[];for(let e=0;e<this.y_size;e++)s.push(this.cells[e][t]);return s}allX(t){return this.getAllX(t)}getAllY(t){const s=[];for(let e=0;this.x_size;e++)s.push(this.cells[t][e]);return s}allY(t){return this.getAllY(t)}getCell(t,s){return this.cells[s][t]}setCell(t,s,e){this.cells[s][t]=e}getAdjacent(t,s){const e=[];return e[0]=this.getCell(t,s+1),e[1]=this.getCell(t+1,s),e[2]=this.getCell(t,s-1),e[3]=this.getCell(t-1,s+1),e}getDiagonal(t,s){const e=[];return e[0]=this.getCell(t-1,s+1),e[1]=this.getCell(t+1,s+1),e[2]=this.getCell(t+1,s-1),e[3]=this.getCell(t-1,s-1),e}getEncircling(t,s){return this.getAdjacent(t,s).concat(this.getDiagonal(t,s))}static getDistance(t,s,e,l){return Math.abs(Math.sqrt(Math.pow(e-t,2)+Math.pow(l-s,2)))}}const d={E:c.E,classes:{boost:i.X,currency:r.Aq,currencyStatic:r.TD,attribute:o.A,grid:h,gridCell:a}};function f(){typeof process!="object"&&typeof window!="undefined"&&(window.eMath=d)}f()}}]);
